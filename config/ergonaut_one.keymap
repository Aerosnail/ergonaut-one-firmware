#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <2 2>;
            then-layer = <3>;
        };
    };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <150>;
        bindings = <&kp>, <&kp>;

        hold-trigger-on-release;
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <150>;
        bindings = <&kp>, <&kp>;

        hold-trigger-on-release;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp B            &kp L            &kp D         &kp W         &kp Z      &kp APOSTROPHE  &kp F            &kp O         &kp U        &kp J        &kp DEL
&kp TAB    &hml LEFT_GUI N  &hml LEFT_ALT R  &hml LCTRL T  &hml LSHFT S  &kp G      &kp Y           &hmr RSHIFT H    &hmr RCTRL A  &hmr RALT E  &hmr RGUI I  &kp SEMI
&kp LCTRL  &kp Q            &kp X            &kp M         &kp C         &kp V      &kp K           &kp P            &kp DOT       &kp MINUS    &kp FSLH     &none
                                             &kp ESCAPE    &lt 1 SPACE   &lt 3 TAB  &lt 4 SEMI      &lt 2 BACKSPACE  &kp RET
            >;
        };

        lower {
            bindings = <
&trans  &kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp LS(UNDER)  &kp LS(AMPS)   &kp DOT        &kp LS(DQT)  &kp LS(LT)    &kp LS(GT)  &kp SQT        &trans
&trans  &kp LS(QMARK)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(COLON)  &kp LS(PIPE)   &kp LS(POUND)  &kp EQUAL    &kp LS(PLUS)  &kp MINUS   &kp LS(EXCL)   &trans
&trans  &kp LS(AT)     &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(DLLR)   &kp LS(TILDE)  &kp LS(PRCNT)  &kp BSLH     &kp LS(STAR)  &kp FSLH    &kp LS(CARET)  &none
                                     &trans        &trans         &trans         &trans         &trans       &trans
            >;
        };

        raise {
            bindings = <
&mt LGUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP  &bootloader      &kp CLCK
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp C_MUTE    &kp LEFT  &kp UP     &kp RIGHT  &kp INS          &mt RCTRL K_APP
&kp LALT         &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp C_VOL_DN  &kp END   &kp DOWN   &kp PG_DN  &kp PAUSE_BREAK  &kp RALT
                                             &trans     &trans     &trans        &trans        &trans    &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R   &kp T   &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&trans  &kp A  &kp S  &kp D   &kp F   &kp G   &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B   &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
