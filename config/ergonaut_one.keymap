#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    hml: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <150>;
        bindings = <&kp>, <&kp>;

        hold-trigger-on-release;
    };

    hmr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <200>;
        require-prior-idle-ms = <150>;
        bindings = <&kp>, <&kp>;

        hold-trigger-on-release;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp B            &kp L            &kp D         &kp W         &kp Z      &kp APOSTROPHE  &kp F            &kp O         &kp U        &kp J        &kp DEL
&kp TAB    &hml LEFT_GUI N  &hml LEFT_ALT R  &hml LCTRL T  &hml LSHFT S  &kp G      &kp Y           &hmr RSHIFT H    &hmr RCTRL A  &hmr RALT E  &hmr RGUI I  &kp SEMI
&kp LCTRL  &kp Q            &kp X            &kp M         &kp C         &kp V      &kp K           &kp P            &kp DOT       &kp MINUS    &kp FSLH     &none
                                             &kp ESCAPE    &lt 1 SPACE   &lt 3 TAB  &lt 3 SEMI      &lt 2 BACKSPACE  &kp RET
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp LS(UNDER)  &kp LS(AMPS)   &kp LS(DQT)    &kp COMMA  &kp LS(LT)    &kp LS(GT)  &kp GRAVE      &trans
&trans  &kp LS(QMARK)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(COLON)  &kp LS(PIPE)   &kp LS(POUND)  &kp EQUAL  &kp LS(PLUS)  &kp MINUS   &kp LS(EXCL)   &trans
&trans  &kp LS(AT)     &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(DLLR)   &kp LS(TILDE)  &kp LS(PRCNT)  &kp BSLH   &kp LS(STAR)  &kp FSLH    &kp LS(CARET)  &none
                                     &trans        &trans         &trans         &trans         &trans     &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &kp LS(PLUS)  &kp C_VOLUME_UP    &kp HOME  &kp UP    &kp END    &kp PG_UP  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &kp EQUAL     &kp C_VOLUME_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &trans
&trans  &kp N0  &kp N1  &kp N2  &kp N3  &kp MINUS     &kp K_MUTE         &trans    &trans    &trans     &kp CAPS   &trans
                        &trans  &trans  &trans        &trans             &trans    &trans
            >;
        };

        adjust {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&sys_reset   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &sys_reset
&bt BT_CLR   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bt BT_CLR
                                         &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };
    };
};
